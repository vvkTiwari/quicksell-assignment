{"version":3,"sources":["components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["button","props","onClick","onClickHandler","className","classes","actionText","App","useState","count","setCount","Button","name","type","value","max","toString","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAWeA,EARA,SAACC,GACZ,OACI,wBAAQC,QAASD,EAAME,eAAgBC,UAAWH,EAAMI,QAAxD,SACKJ,EAAMK,cCwCJC,EAzCH,WAER,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OACA,qBAAKN,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAACO,EAAD,CAASL,WAAW,IAAIH,eAdE,WAC5BO,EAASD,EAAQ,IAagDJ,QAAQ,mBACrE,uBACEO,KAAK,UACLC,KAAK,SACLC,MAAOL,EACPM,IA7BO,IA6BMC,WACbC,SAdc,SAACC,GACrBR,EAASQ,EAAMC,OAAOL,UAepB,cAACH,EAAD,CAAQL,WAAW,IAAIH,eA7BG,WACxBM,EAJS,KAKXC,EAASD,EAAQ,IA2B6CJ,QAAQ,0BC5B/De,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.70b94e78.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst button = (props) => {\n    return (\n        <button onClick={props.onClickHandler} className={props.classes}>\n            {props.actionText}\n        </button>\n    )\n}\n\nexport default button;","import React, { useState } from \"react\";\n\nimport './App.css';\nimport Button from './components/Button';\n\nconst App = () => {\n    // default state of count is set to 1.\n    const [count, setCount] = useState(1);\n    const maxVal = 1000;\n\n    // Function handles counter increment\n    const incrementCountHandler = () => {\n      if (count < maxVal) {\n        setCount(count + 1);\n      }\n    }\n    \n    // Function handles counter decrement\n    const decrementCountHandler = () => {\n      setCount(count - 1);\n      // console.log('count-', count);\n    }\n\n    // Function handles input change event\n    const onInputchange = (event) => {\n      setCount(event.target.value);\n      // console.log('countc', count);\n    }\n\n    return (\n    <div className=\"App\">\n      <div className=\"Container\">\n        <Button  actionText=\"-\" onClickHandler={decrementCountHandler} classes=\"Button BtnLeft\" />\n          <input\n            name=\"counter\"\n            type=\"number\"\n            value={count}\n            max={ maxVal.toString() }\n            onChange={onInputchange}\n          />\n        <Button actionText=\"+\" onClickHandler={incrementCountHandler} classes=\"Button BtnRight\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}